geom_boxplot() +
facet_wrap(~variable)
song_distances <- dist(clustering_data, method = "manhattan")
song_melt <- melt(as.matrix(song_distances))
head(song_melt)
song_hc <- hclust(song_distances, method="complete")
plot(song_hc, hang=-1)
rect.hclust(song_hc, k=13)
song_clust_hc <- cutree(song_hc, k=13)
song_clust_hc
# 1. Prepare numeric data and keep release_year for color
pca_data <- dataset_clean %>%
filter(release_year>0) %>%
drop_na() %>%
select(c(danceability, energy, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo)) %>%
scale()
# 2. Run PCA on everything except release_year
pca_result <- prcomp(pca_data, scale. = TRUE)
# 3. Extract PCA scores and add release year for coloring
pca_scores <- as.data.frame(pca_result$x[, 1:2])
release_years <- dataset_clean %>%
filter(release_year > 0) %>%
drop_na() %>%
pull(release_year)
pca_scores$release_year <- release_years
# 4. Extract loading for arrows
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$variable <- rownames(loadings)
# 5. Plot PCA with arrows and color by release year
ggplot(pca_scores, aes(x = PC1, y = PC2, color = release_year)) +
geom_point(alpha = 0.6) +
scale_color_viridis_c(option = "plasma") +
geom_segment(data = loadings,
aes(x = 0, y = 0, xend = PC1 * 5, yend = PC2 * 5),  # arrows, scaled
arrow = arrow(length = unit(0.2, "cm")), color = "gray30") +
geom_text(data = loadings,
aes(x = PC1 * 5.3, y = PC2 * 5.3, label = variable),
size = 3, color = "gray20") +
labs(
title = "PCA Biplot of Song Features",
x = "PC1",
y = "PC2",
color = "Release Year"
) +
theme_minimal()
pca_data <- dataset_clean %>%
filter(release_year>0) %>%
drop_na() %>%
select(c(danceability, energy, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, tempo)) %>%
scale()
songs_pca <- PCA(pca_data, ncp = 11, graph = FALSE)
songs_pca
fviz_pca_var(songs_pca)
fviz_contrib(songs_pca, choice = "var", axes = 1)
fviz_pca_biplot(songs_pca)
fviz_eig(songs_pca, addlabels = TRUE, ncp=11)
library(gridExtra)
p1 <- fviz_pca_biplot(songs_pca, axes = 1:2)
p2 <- fviz_pca_biplot(songs_pca, axes = 3:4)
p3 <- fviz_pca_biplot(songs_pca, axes = 5:6)
grid.arrange(p1, p2, p3, nrow = 2, ncol=2)
spotify_year <- dataset_clean |>
mutate(
year = as.numeric(substr(release_date, 1, 4)),
decade = floor(year / 10) * 10
)
spotify_dec  <- spotify_year |>
count(decade, sort = TRUE)
spotify_cleaned <- spotify_dec %>%
filter(decade != 0)
spotify_grouped <- spotify_cleaned %>%
mutate(
decade_group = case_when(
decade %in% c(1950, 1960) ~ "1950–1960",
TRUE ~ as.character(decade)
)
)
spotify_grouped %>%
count(decade_group, sort = TRUE)
# Trouver la taille du plus petit groupe
min_n <- spotify_grouped |>
count(decade_group) |>
summarise(min_n = min(n)) |>
pull(min_n)
# Échantillonnage équilibré
spotify_balanced <- spotify_grouped |>
group_by(decade_group) |>
slice_sample(n = min_n) |>
ungroup()
spotify_balanced %>%
count(decade_group, sort = TRUE)
features <- c("danceability", "energy", "acousticness", "instrumentalness",
"liveness", "loudness", "speechiness", "tempo", "valence", "duration_ms")
df <- spotify_balanced |>
select(all_of(features), decade_group) |>
rename(decade = decade_group) |>
mutate(decade = as.factor(decade)) |>
na.omit()
#| echo: false
#| message: false
library(readr)
spotify <- read_csv("~/ML project/top_10000_1950-now.csv")
#spotify <- read_csv("top_10000_1950-now.csv")
#| echo: false
#| message: false
dim(spotify)
dim(spotify)
spotify <- spotify |>
rename(
track_uri            = `Track URI`,
track_name           = `Track Name`,
artist_uris          = `Artist URI(s)`,
artist_names         = `Artist Name(s)`,
album_uri            = `Album URI`,
album_name           = `Album Name`,
album_artist_uris    = `Album Artist URI(s)`,
album_artist_names   = `Album Artist Name(s)`,
release_date         = `Album Release Date`,
album_image_url      = `Album Image URL`,
disc_number          = `Disc Number`,
track_number         = `Track Number`,
duration_ms          = `Track Duration (ms)`,
preview_url          = `Track Preview URL`,
is_explicit          = `Explicit`,
popularity           = `Popularity`,
isrc                 = `ISRC`,
added_by             = `Added By`,
added_at             = `Added At`,
artist_genres        = `Artist Genres`,
danceability         = `Danceability`,
energy               = `Energy`,
key                  = `Key`,
loudness             = `Loudness`,
mode                 = `Mode`,
speechiness          = `Speechiness`,
acousticness         = `Acousticness`,
instrumentalness     = `Instrumentalness`,
liveness             = `Liveness`,
valence              = `Valence`,
tempo                = `Tempo`,
time_signature       = `Time Signature`,
album_genres         = `Album Genres`,
label                = `Label`,
copyrights           = `Copyrights`
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
# View the rows
rows_with_missing
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean))
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
# View the rows
datatable(
rows_with_missing,
options = list(pageLength = 10, scrollX = TRUE),
caption = "Rows with Missing or Blank Values"
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
# View the rows
rows_with_missing |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean))
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
# View the rows
colSums(is.na(spotify_vr)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean))
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
# View the rows
colSums(is.na(spotify_vr)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean))
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
# Show missing values per column
colSums(is.na(spotify_vr))
#Rows with missing values
rows_with_missing <- spotify_vr |>
filter(if_any(everything(), ~ is.na(.) | . == ""))
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
missing_artist_names <- spotify_vr |>
filter(is.na(artist_names) | trimws(artist_names) == "")
# Display the first 20 rows in a nicely formatted table
missing_artist_names |>
head(20) |>
kable(
format = "html",
caption = "Rows with Missing or Blank `artist_names`"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
release_date_missing <- spotify_vr |>
filter(release_date == "0000")
# Display the first 20 rows in a nicely formatted table
release_date_missing |>
head(20) |>
kable(
format = "html",
caption = "Rows with Missing or Blank `artist_names`"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
#Drop instance with missing release date
dataset_clean <- dataset_clean |>
filter(release_date != "0000")
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
#| echo: false
#| message: false
# Count total missing values
sum(is.na(spotify_vr))  # This will return the total number of NAs
dataset_clean <- spotify_vr |>
filter(!is.na(loudness) & loudness != "") %>%
mutate(release_year = as.numeric(substr(release_date, start = 1, stop = 4)))
#Drop instance with missing release date
dataset_clean <- dataset_clean |>
filter(release_date != "0000")
colSums(is.na(dataset_clean)) |>
head(20) |>  # Limit to first 20 rows for readability
kable(
format = "html",
caption = "Rows with Missing or Blank Values"
) |>
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE
)
numeric_data <- dataset_clean %>% select(where(is.numeric)) |>
select(-mode,-time_signature)
long_data <- pivot_longer(numeric_data, cols = everything(), names_to = "Variable", values_to = "Value")
# Faceted boxplots with individual y-axis scales
ggplot(long_data, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Boxplots for Numeric Variables (Individual Scales)", x = "", y = "") +
theme_minimal()
# Summary statistics for key numeric features
dataset_clean %>%
select_if(is.numeric) %>%
summary() %>%
kable() %>%
kable_styling()
spotify_num <- dataset_clean %>%
select_if(is.numeric) %>%
na.omit()
corrplot(cor(spotify_num), method = "color", type = "upper", tl.cex = 0.7)
#start by selecting numeric columns
num_dataset <- dataset_clean %>%
select_if(is.numeric)
cor_matrix <- cor(num_dataset, use = "complete.obs")
ggcorrplot(
cor_matrix,
method    = "square",
lab       = TRUE,
lab_size  = 2,
tl.cex    = 10,
colors    = c("blue", "white", "red"),
outline.col = "gray80",
) +
labs(
title = "Correlation Matrix for Song features"
) +
xlab(NULL)+ ylab(NULL)+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# Summary statistics for key numeric features
dataset_clean %>%
select_if(is.numeric) %>%
summary() %>%
kable() %>%
kable_styling()
dataset_clean %>%
select_if(is.numeric) %>%
summary() %>%
kable() %>%
kable_styling()
dataset_clean %>%
summary() %>%
kable() %>%
kable_styling()
View(dataset_clean)
#| echo: false
# Preview the dataset
knitr::kable(head(dataset_clean),
format = "markdown",
align = 'c',
table.attr = 'class="table table-bordered"',
row.names = FALSE) %>%
kable_styling(font_size = 10, full_width = FALSE, position = "center")
numeric_data <- dataset_clean %>% select(where(is.numeric)) |>
select(-mode,-time_signature)
long_data <- pivot_longer(numeric_data, cols = everything(), names_to = "Variable", values_to = "Value")
# Faceted boxplots with individual y-axis scales
ggplot(long_data, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Boxplots for Numeric Variables (Individual Scales)", x = "", y = "") +
theme_minimal()
spotify_year <- dataset_clean |>
mutate(
year = as.numeric(substr(release_date, 1, 4)),
decade = floor(year / 10) * 10
)
spotify_dec  <- spotify_year |>
count(decade, sort = TRUE)
spotify_cleaned <- spotify_dec %>%
filter(decade != 0)
spotify_grouped <- spotify_cleaned %>%
mutate(
decade_group = case_when(
decade %in% c(1950, 1960) ~ "1950–1960",
TRUE ~ as.character(decade)
)
)
spotify_grouped %>%
count(decade_group, sort = TRUE)
#| echo: false
#| message: false
library(knitr)
library(tidyverse)
library(kableExtra)
library(broom)
library(reshape2)
library(magrittr)
library(corrplot)
library(plotly)
library(ggcorrplot)
library(factoextra)
library(FactoMineR)
library(dplyr)
library(ggplot2)
library(corrplot)
library(randomForest)
library(rpart)
library(rpart.plot)
library(lubridate)
library(caret)
library(rsample)
#| echo: false
#| message: false
library(readr)
#spotify <- read_csv("~/ML project/top_10000_1950-now.csv")
spotify <- read_csv("top_10000_1950-now.csv")
